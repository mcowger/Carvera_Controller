name: release
on:
  push:
    tags:
      - "v*.*.*"
jobs:
  build-windows-artifacts:
    #uncomment below to disable this job for testing
    #if: false
    name: build-windows-${{ matrix.platform }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [win32]
        include:
          - platform: win32
            arch: x64
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: ${{ matrix.arch }}

      - name: Install poetry and dependencies
        uses: ./.github/actions/bootstrap-poetry
        with:
          os: windows

      - uses: git-for-windows/setup-git-for-windows-sdk@v1
        with:
          flavor: minimal
        # We install the SDK so as to have access to the msgfmt.exe binary
        # from the GNU gettext package.

      - name: "Install Windows-Mesa OpenGL DLL"
        run: |
          curl -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/24.2.5/mesa3d-24.2.5-release-msvc.7z
          7z x mesa.7z -o*
          powershell.exe mesa\\systemwidedeploy.cmd 1

      - name: Generate version strings
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry dynamic-versioning

      - name: Build release
        run: poetry run python scripts/build.py --os windows

      - name: Rename artifact
        run: poetry run bash ./scripts/rename-release-file.sh windows

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-assets-${{ matrix.platform }}
          path: ${{ github.workspace }}/dist/carveracontroller-community-*-windows-x64.exe
          retention-days: 2

  build-macos-artifacts:
    #uncomment below to disable this job for testing
    #if: false
    name: build-macos-${{ matrix.platform }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        platform: [Intel, AppleSilicon]
        include:
          - platform: Intel
            image: macos-13
          - platform: AppleSilicon
            image: macos-14
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install poetry and dependencies
        uses: ./.github/actions/bootstrap-poetry
        with:
          os: macos

      - name: Generate version strings
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry dynamic-versioning

      - name: Build release
        run: poetry run python scripts/build.py --os macos

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create dmg file
        run: ./scripts/create-dmg.sh

      - name: Rename artifact
        run: poetry run bash ./scripts/rename-release-file.sh macos

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-assets-${{ matrix.platform }}
          path: ${{ github.workspace }}/dist/carveracontroller-community-*.dmg
          retention-days: 2

  build-linux-artifacts:
    #uncomment below to disable this job for testing
    #if: false
    name: build-linux-${{ matrix.platform }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
        include:
          - platform: x64
            image: ubuntu-24.04
          - platform: arm64
            image: ubuntu-24.04-arm
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install poetry and dependencies
        uses: ./.github/actions/bootstrap-poetry
        with:
          os: linux

      - name: Install MTDev
        run: sudo apt-get install -y mtdev-tools gettext

      - name: Generate version strings
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry dynamic-versioning

      - name: Build release
        run: xvfb-run poetry run python scripts/build.py --os linux

      - name: Rename artifact
        run: poetry run bash ./scripts/rename-release-file.sh linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-assets-${{ matrix.platform }}
          path: ${{ github.workspace }}/dist/carveracontroller-community-*.appimage
          retention-days: 2

  build-pypi-artifacts:
    #uncomment below to disable this job for testing
    #if: false
    name: build-python
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all history is required for the dynamic versioning plugin

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install poetry and dependencies
        uses: ./.github/actions/bootstrap-poetry
        with:
          os: linux

      - name: Add poetry-dynamic-versioning plugin
        run: poetry self add "poetry-dynamic-versioning[plugin]"

      - name: Build python package
        run: poetry build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  build-docker-images:
    #uncomment below to disable this job for testing
    #if: false
    name: build-docker-images
    needs: [build-linux-artifacts]
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x64
            image: ubuntu-24.04
          - platform: arm64
            image: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux AppImage artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-assets-${{ matrix.platform }}
          path: ./artifacts/

      - name: Copy AppImage to Docker build context
        run: |
          mkdir -p packaging_assets/Docker/artifacts/
          cp ./artifacts/*.appimage packaging_assets/Docker/artifacts/

        # Add support for more platforms with QEMU
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACTIONS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/carvera-controller-${{ matrix.platform }}
          tags: |
            type=ref,event=tag
             type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: packaging_assets/Docker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/${{ matrix.platform == 'x64' && 'amd64' || matrix.platform }}


  publish-release:
    #uncomment below to disable this job for testing
    #if: false
    needs:
    #   [build-windows-artifacts, build-macos-artifacts, build-linux-artifacts]
      [build-linux-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            windows-assets-*/carveracontroller-community-*-windows-x64.exe
            macos-assets-*/carveracontroller-community-*.dmg
            linux-assets/carveracontroller-community-*.appimage
